import { Typography } from 'antd';
import { CodeBlock, InfoText} from '../../components';

const { Title, Paragraph, Text } = Typography;

export const LectureTypes = () => {
  return <>
  <Title level={2}>Примитивные типы данных</Title>
    <Paragraph>
      В Java определены восемь примитивных или простых типа данных: <Text strong>byte, short, int, long, float, double, char и boolean</Text>.
    </Paragraph>
    <Paragraph>
      Данные типы можно разделить на несколько групп:
      <ol>
        <li><Text strong>Целые числа</Text>: byte, short, int и long. Эти типы данных содержат целые числа со знаком</li>
        <li><Text strong>Числа с плавающей точкой</Text>: float, double. Содержат вещественные числа или числа с дробной частью</li>
        <li><Text strong>Символы</Text>: char. Данный тип предназначен для символов</li>
        <li><Text strong>Логические значения</Text>: boolean. Тип данных для представления логических значений</li>
      </ol>
    </Paragraph>
    <Paragraph>Примитивные типы обладают явно выраженным диапазоном допустимых значений и математически строгим поведением.</Paragraph>
    <Title level={3}>Целые числа</Title>
    <Paragraph>Для целых чисел в языке Jаvа определены четыре типа: <Text strong>byte</Text>, <Text strong>short</Text>, <Text strong>int</Text> и <Text strong>long</Text>.</Paragraph>
    <Paragraph>
      Все эти типы данных представляют целочисленные значения со знаком: как положительные, так и отрицательные.
      В Java не поддерживаются только положительные целочисленные значения без знака.
    </Paragraph>
    <Title level={4}>Tип byte</Title>
    <Paragraph>Тип byte является наименьшим по длине целочисленным типом. Диапазон допустимых значений от <Text strong>-128</Text> до <Text strong>127</Text>.</Paragraph>
    <Paragraph>
      Переменные типа <Text strong>byte</Text> особенно удобны для передачи данных по сети или для работы с файлами (запись и чтение).
      В математических операциях, как правило, не используется.
      Для объявления переменных этого типа служит ключевое слово <Text strong>byte</Text>.
      Например, в следующей строке кода объявляются две переменные типа <Text strong>byte</Text>:
    </Paragraph>
    <CodeBlock>{`byte b; 
byte value;`}
    </CodeBlock>
    <Title level={4}>Tип short</Title>
    <Paragraph>
      Данный тип представляет собой целочисленные значения со знаком.
      Диапазон его значений от <Text strong>-32 768</Text> до <Text strong>32 767</Text>.
      Этот тип применяется реже всего для экономии памяти.
      Примеры объявления переменных типа <Text strong>short</Text>:
    </Paragraph>
    <CodeBlock>
      {`short s;
short value;`}
    </CodeBlock>
    <Title level={4}>Tип int</Title>
    <Paragraph>
      Наиболее часто употребляемым целочисленным типом является <Text strong>int</Text>.
      Диапазон его целочисленных значений варьируется от <Text strong>-2 147 483 648</Text> до <Text strong>2 147 483 647</Text>.
      Переменные этого типа также используются для управления циклами и индексации массивов.
      Объявление переменных выглядит так:
    </Paragraph>
    <CodeBlock>
      {`int a;
int value;`}
    </CodeBlock>
    <Title level={4}>Tип long</Title>
    <Paragraph>
      Этот тип данных также содержит целочисленные значения со знаком.
      Он удобен в случаях, когда длины <Text strong>int</Text> не хватает для хранения требуемого значения.
      Диапазон: <Text strong>–9 223 372 036 854 775 808</Text> до <Text strong>9 223 372 036 854 775 807</Text>.
      Объявление переменных такого типа выглядит так:
    </Paragraph>
    <CodeBlock>
      {`long e;
long value;`}
    </CodeBlock>
    <Title level={3}>Числа с плавающей точкой</Title>
    <Paragraph>
      Числа с плавающей точкой, называемые также <Text italic>действительными</Text> или <Text italic>вещественными</Text> числами, используются при вычислениях выражений, которые требуют результата с точностью до определенного знака после десятичной точки.
      Существуют два числовых типа с плавающей точкой: <Text strong>float</Text> и <Text strong>double</Text>.
      Так как Java является американским языком программирования, разделителем дробного числа является точка, а не привычная запятая.
    </Paragraph>
    <Title level={4}>Тип float</Title>
    <Paragraph>
      Этот тип определяет числовое значение с плавающей точкой.
      Требует в два раза меньше памяти (32 бита) и в некоторых процессорах выполняется быстрее, по сравнению с <Text strong>double</Text>.
      Диапазон значений от <Text strong>-3.4*10<sup>38</sup></Text> до <Text strong>3.4*10<sup>38</sup></Text>. Если же значения слишком велики или слишком малы, то данный тип не обеспечивает требуемую точность вычислений.
      Переменные типа <Text strong>float</Text> объявляются таким образом:
    </Paragraph>
    <CodeBlock>
      {`float f;
float value;`}
    </CodeBlock>
    <Title level={4}>Тип double</Title>
    <Paragraph>
      Хранит также числовые значения с плавающей точкой.
      В оперативной памяти требуется 64 бита.
      Используется, где необходимо сохранить точность повторяющихся вычислений, а также для  манипуляций с большими числами.
      Диапазон значений от ±4.9*10<sup> -324</sup> до ±1.7976931348623157*10<sup>308</sup>.
      Объявление переменных:
    </Paragraph>
    <CodeBlock>
      {`double d;
double variable;`}
    </CodeBlock>
    <Title level={3}>Символы</Title>
    <Paragraph>
      Для хранения символов в Java используется тип данных <Text strong>char</Text>.
      Для представления символов типа <Text strong>char</Text> в Java используется кодировка в
      <InfoText description={<>
        <Text strong>Юникод (Unicode)</Text> – это стандарт кодировки символов по всему миру, который предоставляет уникальное число для представления каждого символа, используемого в вычислениях, включая технические символы и специальные символы, используемые при публикации.
      </>}>
          Юникод (Unicode)
      </InfoText>.
      Юникод приводит к единой системе десятки наборов символов, в том числе латинский, греческий, арабский алфавит, кириллицу, иврит, японские и тайские иероглифы и многие другие символы.
      Для хранения этих символов требуется 16 бит, и поэтому в Java тип <Text strong>char</Text> является 16-разрядным.
      Диапазон допустимых значений этого типа составляет от <Text strong>0</Text> до <Text strong>65536</Text>.
      Отрицательных значений типа <Text strong>char</Text> не существует.
      Переменные данного типа объявляются так:
    </Paragraph>
    <CodeBlock>
      {`char letter;`}
    </CodeBlock>
    <Title level={3}>Логические значения</Title>
    <Paragraph>
      В языке Java имеется тип данных <Text strong>boolean</Text>, который предназначен для хранения логических значений.
      Переменные этого типа могут принимать только одно из двух возможных значений: <Text strong>true</Text> (истина) или <Text strong>false</Text> (ложь).
      Объявление переменных этого типа:
    </Paragraph>
    <CodeBlock>
      {`boolean b;`}
    </CodeBlock>
  </>
}