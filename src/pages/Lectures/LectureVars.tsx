import { Divider, Typography } from 'antd';
import { CodeBlock, InfoText, TasksLabel, Test} from '../../components';
import { WarningIcon } from '../../assets/icons';

const { Title, Paragraph, Text } = Typography;

export const LectureVars = () => {
  return <>
    <Title level={2}>Переменные и константы</Title>
    <Title level={3}>Переменные</Title>
    <Paragraph>
      Переменная служит основной единицей хранения данных в программе нa Java.
      Переменная определяется в виде сочетания типа, имени и необязательного начального значения.
      Термин <Text strong>"идентификатор"</Text> также употребляется в том же значении, что и имя переменной.
      Все переменные должны быть объявлены <Text strong>до</Text> их использования.
      Основная форма объявления переменных выглядит так:
    </Paragraph>
    <Paragraph strong>
      {`<тип данных> <имя переменной>;`}
    </Paragraph>
    <Paragraph>
      Для имени переменной есть некоторые требования, которые необходимо соблюдать:
      <ol>
        <li>Имя может содержать любые алфавитно-цифровые символы, а также знак подчеркивания, при этом первый символ в имени <Text underline>не должен</Text> быть цифрой.</li>
        <li>В имени <Text underline>не должно</Text> быть знаков пунктуации и пробелов.</li>
        <li>Имя <Text underline>не может</Text> быть<InfoText description={<>
          <Text strong>Ключевые слова</Text> — это предварительно определенные зарезервированные идентификаторы, имеющие специальные значения.
        </>}>ключевым словом</InfoText>языка Java.</li>
      </ol>
    </Paragraph>
    <Paragraph>
      Также существуют некоторые рекомендации относительно имен: 
      <ol>
        <li>
          Краткое и "говорящее" имя. Это поможет понять для чего используется переменная.
          Например, переменная будет хранить номер места в рейсовом автобусе, тогда ей можно дать имя "место".<Text code>int seat;</Text>
        </li>
        <li>Переменные пишутся в формате<InfoText description={<>
            <Text strong>camelCase</Text> - стиль написания составных слов, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово внутри фразы пишется с заглавной буквы, кроме первой.
            Пример:<Text code>char shirtSize;</Text>
          </>}>camelCase</InfoText>(верблюжий или горбатый регистр).
        </li>
      </ol>
    </Paragraph>
    <Paragraph>
      Следует помнить, что Java является <Text strong>регистрозависимым</Text> языком.
      Это означает, что одно и то же слово с отличием регистра хотя бы одного символа, будет восприниматься, как два разных.
      Например: <Text strong>floor</Text> и <Text strong>Floor</Text>.
      Для Java это два разных слова.
    </Paragraph>
    <Title level={3}>Объявление переменных</Title>
    <Paragraph>
      Переменные можно объявить, не присваивая при этом начальное значение.
      <InfoText description={<>
        <Text strong>Инициализация переменной</Text> - присваивание начального значения переменной.
      </>}>Инициализация</InfoText>требуется в тех случаях, когда значение переменной нужно изменить.
      Если переменной не присвоено никакое значение, то произвести операции, изменяющие ее значение естественно не получится.
    </Paragraph>
    <Paragraph>Если требуется объявить несколько переменных одного типа, их можно прописать через запятую после указания типа данных.</Paragraph>
    <Paragraph>При объявлении также можно присвоить значение переменной. </Paragraph>
    <Paragraph><WarningIcon/>Важно помнить, что при инициализации типа данных <Text strong>float</Text> обязательно нужен суффикс <Text strong>F</Text> или <Text strong>f</Text> после присвоенного значения!</Paragraph>
    <Paragraph>Ниже приведены примеры всех случаев объявления:</Paragraph>
    <Title level={5}>Объявление переменной без инициализации</Title>
    <CodeBlock>
      {`int number;
char p;`}
    </CodeBlock>
    <Title level={5}>Объявление нескольких переменных одного типа данных</Title>
    <CodeBlock>
      {`double x, y;
int a, b;`}
    </CodeBlock>
    <Title level={5}>Объявление переменных с инициализацией</Title>
    <CodeBlock>
      {`float coordinate = 5.6f;
boolean inf = true;`}
    </CodeBlock>
    <Title level={4}>Константы</Title>
    <Paragraph>
      Кроме переменной, в Java для хранения данных можно использовать константу. 
      Отличие констант от переменных заключается в том, что константам можно присвоить значение только <Text strong>один</Text> раз. 
    </Paragraph>
    <Paragraph>Для именования констант также существует пара негласных правил:</Paragraph>
    <Paragraph>
      <ol>
        <li>Имена пишутся полностью в верхнем регистре. Например, <Text code>LIMIT</Text>.</li>
        <li>Если имя состоит из нескольких слов, то они разделяются знаком нижнего подчеркивания. Например, <Text code>MAX_VALUE</Text>.</li>
      </ol>
    </Paragraph>
    <Title level={4}>Объявление констант</Title>
    <Paragraph>Для того, чтобы объявить константу, перед типом данных нужно написать ключевое слово <Text strong>final</Text>.</Paragraph>
    <CodeBlock>final int LIMIT = 5;</CodeBlock>
    <TasksLabel/>
    <Divider />
    <Title level={4}>Инициализация</Title>
    <Paragraph>
      Отметьте варианты ответов, в которых верно объявлены и (или) инициализированы переменные или константы.
    </Paragraph>
    <Test
      answers={[
        'int value;',
        'float size, maxSize;',
        'long letter = \'A\';',
        'double width = 4.7d;',
      ]}
      correct={[0,1]}/>
    <Divider />
  </>
}